#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("lib", __dir__)

require "bundler/setup"
require "logger"
require "thor"
require "redis"

require "rencrypt/certificate"
require "rencrypt/floating_ip"
require "rencrypt/redis_store"

module Rencrypt
  class Cli < Thor
    def self.exit_on_failure?
      true
    end

    desc "http", "generate or update a certificate using the HTTP challenge"

    option :common_name, required: true
    option :server_name, required: true
    option :base_path, required: true
    option :email, required: true
    option :floating_ip, required: true
    option :redis_url, required: true
    option :hcloud_token
    option :before_script
    option :after_script

    def http
      floating_ip = Rencrypt::FloatingIp.new(token: hcloud_token, ip: options[:floating_ip])

      if floating_ip.server_name == options[:server_name]
        certificate.update_http if !certificate.exists? || certificate.not_after < expiry_timestamp

        logger.info "writing certificate to redis"

        redis_store.write(
          common_name: certificate.common_name,
          private_key: certificate.read_private_key,
          certificate: certificate.read_certificate
        )
      else
        logger.info "reading certificate from redis"

        if credentials = redis_store.read(options[:common_name])
          certificate.write(
            private_key: credentials[:private_key],
            certificate: credentials[:certificate]
          )
        else
          raise "Certificate not found in redis"
        end
      end
    end

    desc "dns", "generate or update a certificate using the DNS challenge"

    option :common_name, required: true
    option :base_path, required: true
    option :email, required: true
    option :redis_url, required: true
    option :aws_region
    option :aws_access_key
    option :aws_secret_key
    option :before_script
    option :after_script

    def dns
      certificate = Rencrypt::Certificate.new(
        base_path: options[:base_path],
        common_name: options[:common_name],
        email: options[:email],
        before_script: options[:before_script],
        after_script: options[:after_script],
        logger: logger
      )

      logger.info "acquiring lock"

      redis_store.with_lock(options[:common_name], ttl: 300) do
        if credentials = redis_store.read(options[:common_name])
          certificate.write(
            private_key: credentials[:private_key],
            certificate: credentials[:certificate]
          )
        end

        if !certificate.exists? || certificate.not_after < expiry_timestamp
          certificate.update_dns(
            aws_region: aws_region,
            aws_access_key: aws_access_key,
            aws_secret_key: aws_secret_key
          )

          redis_store.write(
            common_name: certificate.common_name,
            private_key: certificate.read_private_key,
            certificate: certificate.read_certificate
          )
        else
          certificate.write(
            private_key: redis_store.read_private_key,
            certificate: redis_store.read_certificate
          )
        end
      end
    end

    private

    def expiry_timestamp
      Time.now + 30 * 24 * 60 * 60
    end

    def redis_store
      @redis_store ||= Rencrypt::RedisStore.new(Redis.new(url: options[:redis_url]).tap(&:ping))
    end

    def logger
      @logger ||= Logger.new(STDOUT)
    end

    def certificate
      @certificate ||= Rencrypt::Certificate.new(
        base_path: options[:base_path],
        common_name: options[:common_name],
        email: options[:email],
        before_script: options[:before_script],
        after_script: options[:after_script],
        logger: logger
      )
    end

    def hcloud_token
      ENV["HCLOUD_TOKEN"] || options[:hcloud_token] || raise("please specify --hcloud-token or HCLOUD_TOKEN")
    end

    def aws_region
      ENV["AWS_REGION"] || options[:aws_region] || raise("please specify --aws-region or AWS_REGION")
    end

    def aws_access_key
      ENV["AWS_ACCESS_KEY_ID"] || options[:aws_access_key] || raise("please specify --aws-access-key or AWS_ACCESS_KEY_ID")
    end

    def aws_secret_key
      ENV["AWS_SECRET_ACCESS_KEY"] || options[:aws_secret_key] || raise("please specify --aws-secret-key or AWS_SECRET_ACCESS_KEY")
    end
  end
end

Rencrypt::Cli.start(ARGV)
